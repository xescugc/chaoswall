// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/chaoswall/service (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gym "github.com/xescugc/chaoswall/gym"
	route "github.com/xescugc/chaoswall/route"
	user "github.com/xescugc/chaoswall/user"
	wall "github.com/xescugc/chaoswall/wall"
	reflect "reflect"
)

// Service is a mock of Service interface
type Service struct {
	ctrl     *gomock.Controller
	recorder *ServiceMockRecorder
}

// ServiceMockRecorder is the mock recorder for Service
type ServiceMockRecorder struct {
	mock *Service
}

// NewService creates a new mock instance
func NewService(ctrl *gomock.Controller) *Service {
	mock := &Service{ctrl: ctrl}
	mock.recorder = &ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Service) EXPECT() *ServiceMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method
func (m *Service) AuthenticateUser(arg0 context.Context, arg1, arg2 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser
func (mr *ServiceMockRecorder) AuthenticateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*Service)(nil).AuthenticateUser), arg0, arg1, arg2)
}

// CreateGym mocks base method
func (m *Service) CreateGym(arg0 context.Context, arg1 gym.Gym) (*gym.Gym, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGym", arg0, arg1)
	ret0, _ := ret[0].(*gym.Gym)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGym indicates an expected call of CreateGym
func (mr *ServiceMockRecorder) CreateGym(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGym", reflect.TypeOf((*Service)(nil).CreateGym), arg0, arg1)
}

// CreateRoute mocks base method
func (m *Service) CreateRoute(arg0 context.Context, arg1, arg2 string, arg3 route.Route) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoute", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoute indicates an expected call of CreateRoute
func (mr *ServiceMockRecorder) CreateRoute(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoute", reflect.TypeOf((*Service)(nil).CreateRoute), arg0, arg1, arg2, arg3)
}

// CreateUser mocks base method
func (m *Service) CreateUser(arg0 context.Context, arg1 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *ServiceMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*Service)(nil).CreateUser), arg0, arg1)
}

// CreateWall mocks base method
func (m *Service) CreateWall(arg0 context.Context, arg1 string, arg2 wall.Wall) (*wall.WithHolds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWall", arg0, arg1, arg2)
	ret0, _ := ret[0].(*wall.WithHolds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWall indicates an expected call of CreateWall
func (mr *ServiceMockRecorder) CreateWall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWall", reflect.TypeOf((*Service)(nil).CreateWall), arg0, arg1, arg2)
}

// DeleteGym mocks base method
func (m *Service) DeleteGym(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGym", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGym indicates an expected call of DeleteGym
func (mr *ServiceMockRecorder) DeleteGym(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGym", reflect.TypeOf((*Service)(nil).DeleteGym), arg0, arg1)
}

// DeleteRoute mocks base method
func (m *Service) DeleteRoute(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoute", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoute indicates an expected call of DeleteRoute
func (mr *ServiceMockRecorder) DeleteRoute(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoute", reflect.TypeOf((*Service)(nil).DeleteRoute), arg0, arg1, arg2, arg3)
}

// DeleteUser mocks base method
func (m *Service) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *ServiceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*Service)(nil).DeleteUser), arg0, arg1)
}

// DeleteWall mocks base method
func (m *Service) DeleteWall(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWall", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWall indicates an expected call of DeleteWall
func (mr *ServiceMockRecorder) DeleteWall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWall", reflect.TypeOf((*Service)(nil).DeleteWall), arg0, arg1, arg2)
}

// GetGym mocks base method
func (m *Service) GetGym(arg0 context.Context, arg1 string) (*gym.Gym, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGym", arg0, arg1)
	ret0, _ := ret[0].(*gym.Gym)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGym indicates an expected call of GetGym
func (mr *ServiceMockRecorder) GetGym(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGym", reflect.TypeOf((*Service)(nil).GetGym), arg0, arg1)
}

// GetGyms mocks base method
func (m *Service) GetGyms(arg0 context.Context) ([]*gym.Gym, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGyms", arg0)
	ret0, _ := ret[0].([]*gym.Gym)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGyms indicates an expected call of GetGyms
func (mr *ServiceMockRecorder) GetGyms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGyms", reflect.TypeOf((*Service)(nil).GetGyms), arg0)
}

// GetRoute mocks base method
func (m *Service) GetRoute(arg0 context.Context, arg1, arg2, arg3 string) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoute", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoute indicates an expected call of GetRoute
func (mr *ServiceMockRecorder) GetRoute(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoute", reflect.TypeOf((*Service)(nil).GetRoute), arg0, arg1, arg2, arg3)
}

// GetRoutes mocks base method
func (m *Service) GetRoutes(arg0 context.Context, arg1, arg2 string) ([]*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutes", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoutes indicates an expected call of GetRoutes
func (mr *ServiceMockRecorder) GetRoutes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutes", reflect.TypeOf((*Service)(nil).GetRoutes), arg0, arg1, arg2)
}

// GetUser mocks base method
func (m *Service) GetUser(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *ServiceMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Service)(nil).GetUser), arg0, arg1)
}

// GetWall mocks base method
func (m *Service) GetWall(arg0 context.Context, arg1, arg2 string) (*wall.WithHolds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWall", arg0, arg1, arg2)
	ret0, _ := ret[0].(*wall.WithHolds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWall indicates an expected call of GetWall
func (mr *ServiceMockRecorder) GetWall(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWall", reflect.TypeOf((*Service)(nil).GetWall), arg0, arg1, arg2)
}

// GetWalls mocks base method
func (m *Service) GetWalls(arg0 context.Context, arg1 string) ([]*wall.WithHolds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalls", arg0, arg1)
	ret0, _ := ret[0].([]*wall.WithHolds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalls indicates an expected call of GetWalls
func (mr *ServiceMockRecorder) GetWalls(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalls", reflect.TypeOf((*Service)(nil).GetWalls), arg0, arg1)
}

// PreviewWallImage mocks base method
func (m *Service) PreviewWallImage(arg0 context.Context, arg1 string, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewWallImage", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewWallImage indicates an expected call of PreviewWallImage
func (mr *ServiceMockRecorder) PreviewWallImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewWallImage", reflect.TypeOf((*Service)(nil).PreviewWallImage), arg0, arg1, arg2)
}

// UpdateGym mocks base method
func (m *Service) UpdateGym(arg0 context.Context, arg1 string, arg2 gym.Gym) (*gym.Gym, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGym", arg0, arg1, arg2)
	ret0, _ := ret[0].(*gym.Gym)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGym indicates an expected call of UpdateGym
func (mr *ServiceMockRecorder) UpdateGym(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGym", reflect.TypeOf((*Service)(nil).UpdateGym), arg0, arg1, arg2)
}

// UpdateRoute mocks base method
func (m *Service) UpdateRoute(arg0 context.Context, arg1, arg2, arg3 string, arg4 route.Route) (*route.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoute", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*route.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoute indicates an expected call of UpdateRoute
func (mr *ServiceMockRecorder) UpdateRoute(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoute", reflect.TypeOf((*Service)(nil).UpdateRoute), arg0, arg1, arg2, arg3, arg4)
}

// UpdateUser mocks base method
func (m *Service) UpdateUser(arg0 context.Context, arg1 string, arg2 user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *ServiceMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*Service)(nil).UpdateUser), arg0, arg1, arg2)
}

// UpdateWall mocks base method
func (m *Service) UpdateWall(arg0 context.Context, arg1, arg2 string, arg3 wall.Wall) (*wall.WithHolds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWall", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*wall.WithHolds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWall indicates an expected call of UpdateWall
func (mr *ServiceMockRecorder) UpdateWall(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWall", reflect.TypeOf((*Service)(nil).UpdateWall), arg0, arg1, arg2, arg3)
}
