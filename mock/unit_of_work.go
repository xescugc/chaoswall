// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/chaoswall/unitwork (interfaces: UnitOfWork)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	gym "github.com/xescugc/chaoswall/gym"
	hold "github.com/xescugc/chaoswall/hold"
	route "github.com/xescugc/chaoswall/route"
	user "github.com/xescugc/chaoswall/user"
	wall "github.com/xescugc/chaoswall/wall"
	reflect "reflect"
)

// UnitOfWork is a mock of UnitOfWork interface
type UnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *UnitOfWorkMockRecorder
}

// UnitOfWorkMockRecorder is the mock recorder for UnitOfWork
type UnitOfWorkMockRecorder struct {
	mock *UnitOfWork
}

// NewUnitOfWork creates a new mock instance
func NewUnitOfWork(ctrl *gomock.Controller) *UnitOfWork {
	mock := &UnitOfWork{ctrl: ctrl}
	mock.recorder = &UnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *UnitOfWork) EXPECT() *UnitOfWorkMockRecorder {
	return m.recorder
}

// Gyms mocks base method
func (m *UnitOfWork) Gyms() gym.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gyms")
	ret0, _ := ret[0].(gym.Repository)
	return ret0
}

// Gyms indicates an expected call of Gyms
func (mr *UnitOfWorkMockRecorder) Gyms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gyms", reflect.TypeOf((*UnitOfWork)(nil).Gyms))
}

// Holds mocks base method
func (m *UnitOfWork) Holds() hold.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Holds")
	ret0, _ := ret[0].(hold.Repository)
	return ret0
}

// Holds indicates an expected call of Holds
func (mr *UnitOfWorkMockRecorder) Holds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Holds", reflect.TypeOf((*UnitOfWork)(nil).Holds))
}

// Routes mocks base method
func (m *UnitOfWork) Routes() route.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].(route.Repository)
	return ret0
}

// Routes indicates an expected call of Routes
func (mr *UnitOfWorkMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*UnitOfWork)(nil).Routes))
}

// Users mocks base method
func (m *UnitOfWork) Users() user.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(user.Repository)
	return ret0
}

// Users indicates an expected call of Users
func (mr *UnitOfWorkMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*UnitOfWork)(nil).Users))
}

// Walls mocks base method
func (m *UnitOfWork) Walls() wall.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walls")
	ret0, _ := ret[0].(wall.Repository)
	return ret0
}

// Walls indicates an expected call of Walls
func (mr *UnitOfWorkMockRecorder) Walls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walls", reflect.TypeOf((*UnitOfWork)(nil).Walls))
}
