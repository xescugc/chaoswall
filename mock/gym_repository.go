// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/chaoswall/gym (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gym "github.com/xescugc/chaoswall/gym"
	reflect "reflect"
)

// GymRepository is a mock of Repository interface
type GymRepository struct {
	ctrl     *gomock.Controller
	recorder *GymRepositoryMockRecorder
}

// GymRepositoryMockRecorder is the mock recorder for GymRepository
type GymRepositoryMockRecorder struct {
	mock *GymRepository
}

// NewGymRepository creates a new mock instance
func NewGymRepository(ctrl *gomock.Controller) *GymRepository {
	mock := &GymRepository{ctrl: ctrl}
	mock.recorder = &GymRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *GymRepository) EXPECT() *GymRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *GymRepository) Create(arg0 context.Context, arg1 gym.Gym) (uint32, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *GymRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*GymRepository)(nil).Create), arg0, arg1)
}

// DeleteByCanonical mocks base method
func (m *GymRepository) DeleteByCanonical(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteByCanonical", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByCanonical indicates an expected call of DeleteByCanonical
func (mr *GymRepositoryMockRecorder) DeleteByCanonical(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByCanonical", reflect.TypeOf((*GymRepository)(nil).DeleteByCanonical), arg0, arg1)
}

// Filter mocks base method
func (m *GymRepository) Filter(arg0 context.Context) ([]*gym.Gym, error) {
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].([]*gym.Gym)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter
func (mr *GymRepositoryMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*GymRepository)(nil).Filter), arg0)
}

// FindByCanonical mocks base method
func (m *GymRepository) FindByCanonical(arg0 context.Context, arg1 string) (*gym.Gym, error) {
	ret := m.ctrl.Call(m, "FindByCanonical", arg0, arg1)
	ret0, _ := ret[0].(*gym.Gym)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCanonical indicates an expected call of FindByCanonical
func (mr *GymRepositoryMockRecorder) FindByCanonical(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCanonical", reflect.TypeOf((*GymRepository)(nil).FindByCanonical), arg0, arg1)
}

// UpdateByCanonical mocks base method
func (m *GymRepository) UpdateByCanonical(arg0 context.Context, arg1 string, arg2 gym.Gym) error {
	ret := m.ctrl.Call(m, "UpdateByCanonical", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByCanonical indicates an expected call of UpdateByCanonical
func (mr *GymRepositoryMockRecorder) UpdateByCanonical(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByCanonical", reflect.TypeOf((*GymRepository)(nil).UpdateByCanonical), arg0, arg1, arg2)
}
